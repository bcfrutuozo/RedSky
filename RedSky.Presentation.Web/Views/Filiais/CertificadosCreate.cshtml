@model RedSky.Presentation.Web.ViewModels.CertificadoDigitalViewModel

@{
    ViewBag.Title = "CertificadosCreate";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
    window.onload = function() {
        document.getElementById('uploader').onsubmit = function() {
            var formdata = new FormData(); //FormData object
            var fileInput = document.getElementById('fileInput');
            //Iterating through each files selected in fileInput
            for (i = 0; i < fileInput.files.length; i++) {
                //Appending each file to FormData object
                formdata.append(fileInput.files[i].name, fileInput.files[i]);
            }
            //Creating an XMLHttpRequest and sending
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/Filiais/UploadCertificate');
            xhr.send(formdata);
            xhr.onreadystatechange = function() {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    alert(xhr.responseText);
                }
            };
            return false;
        };
    }
</script>

<h2>Adicionar certificado digital</h2>

<form id="uploader">
    <input id="fileInput" type="file">
    <input type="submit" value="Upload file"/>
</form>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr/>
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        @Html.HiddenFor(model => model.IdFilial, new {htmlAttributes = new {@class = "form-control"}})
        @Html.ValidationMessageFor(model => model.IdFilial, "", new {@class = "text-danger"})

        <div class="form-group">
            @Html.LabelFor(model => model.SenhaCertificado, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.SenhaCertificado, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.SenhaCertificado, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfirmaSenhaCertificado, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfirmaSenhaCertificado, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.ConfirmaSenhaCertificado, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subject, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Subject, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Issuer, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Issuer, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Issuer, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Version, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Version, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Version, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ValidDate, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.ValidDate, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.ValidDate, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpiryDate, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExpiryDate, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.ExpiryDate, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Thumbprint, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Thumbprint, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Thumbprint, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SerialNumber, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.SerialNumber, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.SerialNumber, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FriendlyName, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.FriendlyName, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.FriendlyName, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PublicKeyFormat, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.PublicKeyFormat, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.PublicKeyFormat, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RawDataLength, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.RawDataLength, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.RawDataLength, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NomeEmpresarial, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.NomeEmpresarial, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.NomeEmpresarial, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default"/>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>